name: Release

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'What kind of version increase should be used'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      run_tests:
        description: 'Run tests before publishing'
        required: false
        default: true
        type: boolean
      generate_ai_changelog:
        description: 'Generate changelog using Claude Code'
        required: false
        default: true
        type: boolean

env:
  CARGO_TERM_COLOR: always

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - uses: actions/checkout@v5
        with:
          token: ${{ secrets.PUBLISH_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Calculate version
        id: version
        run: |
          CURRENT_VERSION=$(grep '^version' throttlecrab/Cargo.toml | head -1 | cut -d'"' -f2)
          BUMP_TYPE="${{ github.event.inputs.version_bump }}"
          echo "Current version: $CURRENT_VERSION"
          echo "Calculating $BUMP_TYPE version bump from $CURRENT_VERSION"

          # Parse current version
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

          case "$BUMP_TYPE" in
            patch)
              NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
              ;;
            minor)
              NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
              ;;
            major)
              NEW_VERSION="$((MAJOR + 1)).0.0"
              ;;
          esac

          echo "Calculated new version: $NEW_VERSION"

          # Validate semantic version format
          if ! echo "$NEW_VERSION" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "❌ Invalid version format. Expected semantic versioning (e.g., 0.4.5)"
            exit 1
          fi

          # Check if tag already exists
          if git tag -l | grep -q "v$NEW_VERSION"; then
            echo "❌ Tag v$NEW_VERSION already exists. Version has already been released."
            exit 1
          fi

          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "✅ Version calculated and validated: $NEW_VERSION"

      - name: Install protoc
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
          protoc --version

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Update throttlecrab version
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          # More robust version update - match the exact line
          sed -i "1,5s/^version = \"[^\"]*\"/version = \"$VERSION\"/" throttlecrab/Cargo.toml
          echo "✅ Updated throttlecrab to version $VERSION"

      - name: Update throttlecrab-server version and dependency
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          # Update server version - match the exact line in first few lines
          sed -i "1,5s/^version = \"[^\"]*\"/version = \"$VERSION\"/" throttlecrab-server/Cargo.toml
          # Update dependency reference - more precise pattern
          sed -i "s/throttlecrab = { path = \"\.\.\/throttlecrab\", version = \"[^\"]*\"/throttlecrab = { path = \"..\/throttlecrab\", version = \"$VERSION\"/" throttlecrab-server/Cargo.toml
          echo "✅ Updated throttlecrab-server to version $VERSION"

      - name: Update Cargo.lock
        run: |
          echo "🔄 Updating Cargo.lock with new versions..."
          cargo update --workspace
          echo "✅ Cargo.lock updated"

      - name: Run tests
        if: ${{ github.event.inputs.run_tests }}
        run: |
          echo "🧪 Running tests..."
          cargo test --all --verbose

      - name: Run clippy
        if: ${{ github.event.inputs.run_tests }}
        run: |
          echo "🔍 Running clippy..."
          cargo clippy --all-targets --all-features -- -D warnings

      - name: Check formatting
        if: ${{ github.event.inputs.run_tests }}
        run: |
          echo "🎨 Checking formatting..."
          cargo fmt --all -- --check

      - name: Get previous tag for changelog
        id: previous_tag
        run: |
          # Get the latest tag before we create the new one
          PREVIOUS_TAG=$(git tag -l --sort=-version:refname | head -1)

          if [ -z "$PREVIOUS_TAG" ]; then
            echo "No previous tag found, will use first commit"
            PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
          fi

          echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
          echo "✅ Previous tag/commit for changelog: $PREVIOUS_TAG"

      - name: Commit version changes
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          git add throttlecrab/Cargo.toml throttlecrab-server/Cargo.toml Cargo.lock
          git commit -m "chore: bump version to $VERSION"
          echo "✅ Committed version changes and updated Cargo.lock"

      - name: Create and push tag
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          git tag "v$VERSION"
          git push origin main "v$VERSION"
          echo "✅ Created and pushed tag v$VERSION"

      - name: Publish throttlecrab to crates.io
        run: |
          echo "📦 Publishing throttlecrab to crates.io..."
          cd throttlecrab
          cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
          echo "✅ throttlecrab published"
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Wait for crates.io propagation
        run: |
          echo "⏳ Waiting 30 seconds for crates.io propagation..."
          sleep 30

      - name: Publish throttlecrab-server to crates.io
        run: |
          echo "📦 Publishing throttlecrab-server to crates.io..."
          cd throttlecrab-server
          cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
          echo "✅ throttlecrab-server published"
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Generate changelog with Claude
        id: claude-changelog
        if: ${{ github.event.inputs.generate_ai_changelog == 'true' }}
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          mode: agent
          allowed_tools: "Edit,MultiEdit,Glob,Grep,Read,Write,Bash(git log:*),Bash(git tag:*),Bash(git show:*)"
          direct_prompt: |
            Generate a changelog for version ${{ steps.version.outputs.version }} based on the git commits since the previous tag ${{ steps.previous_tag.outputs.previous_tag }}.

            CRITICAL: Return ONLY the changelog markdown. No analysis, no explanation, no introduction text.

            Your entire response must be EXACTLY this format:

            ## Changes

            ### Category Name
            • Brief description of change
            • Another change description

            **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.version.outputs.current_version }}...v${{ steps.version.outputs.version }}

            Rules:
            - Start immediately with "## Changes"
            - Use bullet points (•)
            - Exclude version bumps and CI-only changes
            - Maximum 6 lines of changes
            - NO text before "## Changes"
            - NO explanations after the Full Changelog link

            If there are no meaningful changes, use: "## Changes\n\n• Maintenance release\n\n**Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.version.outputs.current_version }}...v${{ steps.version.outputs.version }}"

      - name: Store Claude execution log as artifact
        uses: actions/upload-artifact@v4
        if: ${{ always() && github.event.inputs.generate_ai_changelog == 'true' }}
        with:
          name: claude-execution-log-v${{ steps.version.outputs.version }}
          path: ${{ steps.claude-changelog.outputs.execution_file }}
          retention-days: 30

      - name: Extract changelog from execution file
        id: extract-changelog
        if: ${{ github.event.inputs.generate_ai_changelog == 'true' }}
        run: |
          EXECUTION_FILE="${{ steps.claude-changelog.outputs.execution_file }}"
          if [ -f "$EXECUTION_FILE" ]; then
            echo "Reading changelog from: $EXECUTION_FILE"
            # Extract result from the last object with type "result" in the JSON array
            CHANGELOG=$(jq -r '.[] | select(.type == "result") | .result' "$EXECUTION_FILE" 2>/dev/null)

            # Fallback: if jq fails (malformed JSON), try grep extraction
            if [ -z "$CHANGELOG" ] || [ "$CHANGELOG" = "null" ]; then
              echo "jq extraction failed, trying grep fallback..."
              CHANGELOG=$(grep -o '"result": "[^"]*"' "$EXECUTION_FILE" | tail -n1 | sed 's/"result": "//' | sed 's/"$//' | sed 's/\\n/\n/g')
            fi

            # Convert \n escape sequences to actual newlines
            CHANGELOG=$(echo "$CHANGELOG" | sed 's/\\n/\n/g')

            # Clean up any unwanted text - extract from "## Changes" onwards
            if echo "$CHANGELOG" | grep -q "## Changes"; then
              CHANGELOG=$(echo "$CHANGELOG" | sed -n '/## Changes/,$p')
            fi

            # Debug: show what we extracted
            echo "Extracted changelog:"
            echo "$CHANGELOG"
            echo "--- End of changelog ---"

            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            printf '%s\n' "$CHANGELOG" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "Execution file not found: $EXECUTION_FILE"
            echo "changelog=Error: Could not find Claude execution results" >> $GITHUB_OUTPUT
          fi

      - name: Generate simple changelog
        id: simple-changelog
        if: ${{ github.event.inputs.generate_ai_changelog != 'true' }}
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          CURRENT_VERSION="${{ steps.version.outputs.current_version }}"
          PREVIOUS_TAG="${{ steps.previous_tag.outputs.previous_tag }}"

          echo "Generating simple changelog for v$VERSION..."

          # Get commit count since previous tag
          COMMIT_COUNT=$(git log --oneline "$PREVIOUS_TAG"..HEAD | wc -l)

          # Generate basic changelog
          CHANGELOG="## Changes

• Version bump from $CURRENT_VERSION to $VERSION
• Includes $COMMIT_COUNT commits since previous release

**Full Changelog**: https://github.com/${{ github.repository }}/compare/v$CURRENT_VERSION...v$VERSION"

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          printf '%s\n' "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "✅ Simple changelog generated"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: v${{ steps.version.outputs.version }}
          body: ${{ steps.extract-changelog.outputs.changelog || steps.simple-changelog.outputs.changelog }}
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build binary for linux/amd64
        run: |
          echo "🔨 Building throttlecrab-server for linux/amd64..."
          rustup target add x86_64-unknown-linux-musl
          cargo build --release --target x86_64-unknown-linux-musl -p throttlecrab-server
          mkdir -p target/amd64
          cp target/x86_64-unknown-linux-musl/release/throttlecrab-server target/amd64/
          echo "✅ AMD64 binary ready"

      - name: Install cross-compilation tools for ARM64
        run: |
          echo "📦 Installing cross-compilation tools for ARM64..."
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "✅ ARM64 cross-compilation tools installed"

      - name: Build binary for linux/arm64
        run: |
          echo "🔨 Building throttlecrab-server for linux/arm64..."
          rustup target add aarch64-unknown-linux-musl
          export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=aarch64-linux-gnu-gcc
          cargo build --release --target aarch64-unknown-linux-musl -p throttlecrab-server
          mkdir -p target/arm64
          cp target/aarch64-unknown-linux-musl/release/throttlecrab-server target/arm64/
          echo "✅ ARM64 binary ready"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/throttlecrab:${{ steps.version.outputs.version }}
            ${{ secrets.DOCKERHUB_USERNAME }}/throttlecrab:latest
          labels: |
            org.opencontainers.image.description=ThrottleCrab rate limiting server
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
          provenance: false
          sbom: false
          outputs: type=registry,progress=plain

      - name: Cleanup on failure
        if: failure()
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          echo "🚨 Release failed! Attempting cleanup..."

          # Try to delete the tag if it was created
          if git tag -l | grep -q "v$VERSION"; then
            echo "Deleting local tag v$VERSION"
            git tag -d "v$VERSION" || true

            # Try to delete remote tag (might not exist if push failed)
            echo "Attempting to delete remote tag v$VERSION"
            git push --delete origin "v$VERSION" 2>/dev/null || echo "Remote tag not found or already deleted"
          fi

          echo "⚠️  NOTE: Manual cleanup may be required:"
          echo "- Check if version commit needs to be reverted"
          echo "- Verify crates.io publication status"
          echo "- Review any partial GitHub releases"

      - name: Summary
        if: success()
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          RUN_TESTS="${{ github.event.inputs.run_tests }}"

          echo "## 🎉 Release Complete!"
          echo ""
          echo "✅ Version bumped to $VERSION"
          if [ "$RUN_TESTS" = "true" ]; then
            echo "✅ Tests, clippy, and formatting checks passed"
          else
            echo "⚠️  Tests were skipped"
          fi
          echo "✅ Tag v$VERSION created and pushed"
          echo "✅ throttlecrab v$VERSION published to crates.io"
          echo "✅ throttlecrab-server v$VERSION published to crates.io"
          echo "✅ GitHub release v$VERSION created with changelog"
          echo "✅ Docker images v$VERSION built and pushed to Docker Hub"
          echo ""
          echo "🔗 **Links:**"
          echo "- [GitHub Release](https://github.com/lazureykis/throttlecrab/releases/tag/v$VERSION)"
          echo "- [throttlecrab on crates.io](https://crates.io/crates/throttlecrab)"
          echo "- [throttlecrab-server on crates.io](https://crates.io/crates/throttlecrab-server)"
          echo "- [Docker Image on Docker Hub](https://hub.docker.com/r/lazureykis/throttlecrab)"
